@using System.Security.Claims
@using ContactListApp.BaseRepository
@using ContactListApp.Model
@implements IDisposable

@inject ClaimsPrincipal User
@inject NavigationManager Nav
@inject IPageHelper PageHelper
@inject EditService EditService

@if (!Busy && Contact == null) {
	<div class="alert alert-warning">Could not find contact with id <span>@ContactId</span>.</div>
}
else {
	<ContactForm Busy="@Busy" Contact="@Contact" DbContact="@DbContact" IsAdd="false"
	             CancelRequest="Cancel"
	             ValidationResult="@(async success => await ValidationResultAsync(success))"/>
}
@if (ConcurrencyError) {
	<br/>
	<div class="alert alert-danger">
		<p>
			The contact details have changed since it was last loaded. The updated fields are highlighted in the form.
			Please choose an option:
		</p>
		<p><b>Cancel</b> to lose your changes and keep the database version</p>
		<p><b>Submit</b> to force an update with your version</p>
	</div>
}
@if (Error) {
	<br/>
	<div class="alert alert-danger">Failed to update the contact (@ErrorMessage).</div>
}

@code {

	/// <summary>
	///     Id of <see cref="Contact" /> to edit.
	/// </summary>
	[Parameter]
	public int ContactId { get; set; }

	/// <summary>
	///     The <see cref="IUnitOfWork{Contact}" /> to service requests.
	/// </summary>
	[Parameter]
	public IUnitOfWork<Contact> Service { get; set; }

	/// <summary>
	///     <see cref="Contact" /> being edited.
	/// </summary>
	public Contact Contact { get; set; }

	/// <summary>
	///     Database version of <see cref="Contact" /> when concurrency issues exist.
	/// </summary>
	public Contact DbContact { get; set; }

	/// <summary>
	///     Avoid concurrent requests.
	/// </summary>
	public bool Busy;

	/// <summary>
	///     An error occurred in the update.
	/// </summary>
	public bool Error;

	/// <summary>
	///     A concurrency error needs resolution.
	/// </summary>
	public bool ConcurrencyError;

	/// <summary>
	///     Error message.
	/// </summary>
	public string ErrorMessage = string.Empty;

	/// <summary>
	///     Start it up.
	/// </summary>
	/// <returns>A <see cref="Task" />.</returns>
	protected override async Task OnParametersSetAsync() {
		Contact = await Service.Repo.LoadAsync(ContactId, null, true);
		Busy = false; // end async

		await base.OnInitializedAsync();
	}

	public override async Task SetParametersAsync(ParameterView parameters) {
		Busy = true;
		await base.SetParametersAsync(parameters);
	}

	/// <summary>
	///     Result of form validation.
	/// </summary>
	/// <param name="success"><c>True</c> when model is valid.</param>
	/// <returns>A <see cref="Task" />.</returns>
	public async Task ValidationResultAsync(bool success) {
		if (Busy) {
			return;
		}

		if (!success) {
			// still need to edit model
			Error = false;
			ConcurrencyError = false;
			return;
		}

		Busy = true; // async
		try {
			await Service.CommitAsync();
			EditService.Success = true;
			// go to view to see the record
			Nav.NavigateTo($"/view/{Contact.Id}");
		}
		catch (RepoConcurrencyException<Contact> dbex) {
			// concurrency issues!
			ConcurrencyError = true;

			if (dbex.DbEntity == null) {
				// deleted - show contact not found
				Nav.NavigateTo($"/view/{Contact.Id}");
				return;
			}

			// bind to show labels on form
			DbContact = dbex.DbEntity;

			Error = false;
			Busy = false;
		}
		catch (Exception ex) {
			// unknown exception
			Error = true;
			ErrorMessage = ex.Message;
			Busy = false;
		}
	}

	/// <summary>
	///     Bail out!
	/// </summary>
	public void Cancel() {
		Busy = true;
		Nav.NavigateTo($"/{PageHelper.Page}");
	}

	/// <summary>
	///     Dispose and properly unregister the handler.
	/// </summary>
	/// <param name="disposing"><c>True</c> when disposing.</param>
	public void Dispose() {
		if (Service != null) {
			Service.Dispose();
			Service = null;
		}
	}

}