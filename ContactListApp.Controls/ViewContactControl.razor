@using System.Security.Claims
@using ContactListApp.BaseRepository
@using ContactListApp.Model
@inject ClaimsPrincipal User
@inject IBasicRepository<Contact> Repo
@inject IPageHelper PageHelper
@inject EditService EditService

@if (NotFound) {
	<div class="alert alert-warning">A contact with that id doesn't exist.</div>
}
@if (Deleted) {
	<div class="btn btn-danger">🚫 This item has been deleted.</div>
}
@if (!Deleted && !NotFound && Contact == null) {
	<div class="alert alert-info">Loading...</div>
}
@if (!Deleted && Contact != null) {
	<h1>@Contact.LastName, @Contact.FirstName</h1>
	<br/>
	@if (EditSuccess) {
		<div class="alert alert-success">Successfully updated the contact.</div>
	}

	<hr/>
	<h2>📞 Phone</h2>
	<br/>
	<h3>@Contact.Phone</h3>
	<br/>
	<h2>🏠 Address</h2>
	<br/>
	<h3>@Contact.Street</h3>
	<h3>@Contact.City, @Contact.State @Contact.ZipCode</h3>
	<br/>
	<a class="btn btn-primary" title="Go Back" href="/@PageHelper.Page">
		🔙 Back to List
	</a>
	<a class="btn btn-primary" title="Edit" href="/edit/@Contact.Id">Edit</a>
	<span>&nbsp;</span>
	@if (!ShowConfirmation) {
		<button class="btn btn-danger" @onclick="@ShowDeleteConfirmation">Delete</button>
	}
	else {
		<br/>
		<br/>
		<DeletePrompt Confirmation="@(async result => await ConfirmAsync(result))"/>
	}
}

@code {

	/// <summary>
	///     Id from route of <see cref="Contact" />.
	/// </summary>
	[Parameter]
	public int ContactId { get; set; }

	/// <summary>
	///     Navigation check.
	/// </summary>
	private int _lastContactId;

	/// <summary>
	///     <c>True</c> with redirect from add.
	/// </summary>
	public bool EditSuccess { get; set; }

	/// <summary>
	///     The <see cref="Contact" /> to view.
	/// </summary>
	public Contact Contact { get; set; }

	/// <summary>
	///     Set to <c>true</c> when not found.
	/// </summary>
	public bool NotFound = false;

	/// <summary>
	///     Set to <c>true</c> when delete is requested.
	/// </summary>
	public bool ShowConfirmation = false;

	/// <summary>
	///     Set to true when delete is successful
	/// </summary>
	public bool Deleted = false;

	/// <summary>
	///     Loaded the component.
	/// </summary>
	/// <param name="firstRender"><c>true</c> on first render.</param>
	/// <returns>A <see cref="Task" />.</returns>
	protected override async Task OnAfterRenderAsync(bool firstRender) {
		if (!firstRender) {
			await LoadContactAsync();
		}

		await base.OnInitializedAsync();
	}

	/// <summary>
	///     Navigated.
	/// </summary>
	/// <returns>A <see cref="Task" />.</returns>
	protected override async Task OnParametersSetAsync() {
		if (_lastContactId != ContactId) {
			_lastContactId = ContactId;
			EditSuccess = EditService.Success;
			EditService.Success = false;
			await LoadContactAsync();
		}

		await base.OnParametersSetAsync();
	}

	/// <summary>
	///     Confirm deletion.
	/// </summary>
	/// <param name="result"><c>True</c> when user confirmed</param>
	/// <returns>A <see cref="Task" />.</returns>
	public async Task ConfirmAsync(bool result) {
		if (result) {
			await DeleteAsync();
		}
		else {
			ShowConfirmation = false;
			EditSuccess = false;
		}
	}

	public void ShowDeleteConfirmation() {
		ShowConfirmation = true;
		EditSuccess = false;
	}

	/// <summary>
	///     Loads the <see cref="Contact" />.
	/// </summary>
	/// <returns>A <see cref="Task" />.</returns>
	private async Task LoadContactAsync() {
		NotFound = false;
		Contact = null;
		Contact = await Repo.LoadAsync(ContactId, null);
		if (Contact == null) {
			NotFound = true;
		}
	}

	/// <summary>
	///     Deletes the contact.
	/// </summary>
	/// <returns>A <see cref="Task" />.</returns>
	private async Task DeleteAsync() {
		bool result = await Repo.DeleteAsync(ContactId, User);
		if (result) {
			Deleted = true;
		}
		else {
			// show not found
			await LoadContactAsync();
		}
	}

}